# -*- coding: utf-8 -*-
"""Medical_insurence_cost_prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14S9txUEcBv9i9T6YO4309vPkByQ2ugCk
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn import metrics

Insurence_Dataset=pd.read_csv('/content/medical_insurance.csv')

Insurence_Dataset.head()

Insurence_Dataset.tail()

# number of rows and coloumn

Insurence_Dataset.shape

Insurence_Dataset.info()

# total 3 categorical columns

# checking for issing values

Insurence_Dataset.isnull().sum()

# data analysis

Insurence_Dataset.describe()

# distribution of age

sns.set()
plt.figure(figsize=(6,6))
sns.distplot(Insurence_Dataset['age'])
plt.title('Age distribution')

# Gender coloumn
plt.figure(figsize=(6,6))
sns.countplot(x='sex',data=Insurence_Dataset)
plt.title('Sex_ didtribution')
plt.show()

Insurence_Dataset['sex'].value_counts()

plt.figure(figsize=(6,6))
sns.distplot(Insurence_Dataset['bmi'])
plt.title('bmi distribution')

# NOrmal bmi range is 18.5-24.9

plt.figure(figsize=(6,6))
sns.countplot(x='children',data=Insurence_Dataset)
plt.title('children')
plt.show()

Insurence_Dataset['children'].value_counts()

plt.figure(figsize=(6,6))
sns.countplot(x='smoker',data=Insurence_Dataset)
plt.title('smoker')
plt.show()

Insurence_Dataset['smoker'].value_counts()

plt.figure(figsize=(6,6))
sns.countplot(x='region',data=Insurence_Dataset)
plt.title('region')
plt.show()

Insurence_Dataset['region'].value_counts()

plt.figure(figsize=(6,6))
sns.distplot(Insurence_Dataset['charges'])
plt.title('charge distribution')

# encoding categorical feature
#1) sex
Insurence_Dataset.replace({'sex':{'male':0,'female':1}}, inplace=True)

Insurence_Dataset.head()

Insurence_Dataset['smoker'].unique()

Insurence_Dataset.replace({'smoker':{'yes':1,'no':0}}, inplace=True)

Insurence_Dataset.head()

Insurence_Dataset['region'].unique()

Insurence_Dataset.replace({'region':{'southwest':0, 'southeast':1,'northwest':2,'northeast':3}}, inplace=True)

Insurence_Dataset.head()

Insurence_Dataset.tail()

# splitting data into test and train dataset

X=Insurence_Dataset.drop(columns='charges',axis=1) # removing charges from dataset and storig in X variable
Y=Insurence_Dataset['charges']

Insurence_Dataset.head()

print(X)
print(Y)

x_train ,x_test,y_train,y_test=train_test_split(X,Y,test_size=0.2,random_state=2)

print(X.shape,x_train.shape,x_test.shape)

# model traiing
regression=LinearRegression()

regression.fit(x_train,y_train)

# model eveluation
# prediction of training data

training_data_prediction=regression.predict(x_train)

# Rsqure value
r2_train=metrics.r2_score(y_train,training_data_prediction)
print('R2 value :',r2_train)

testing_data_prediction=regression.predict(x_test)
r2_test=metrics.r2_score(y_test,testing_data_prediction)
print('R2 value :',r2_test)

# Build  predictive system

input_data=(18,0,33.77,1,1,1)

# changing i/p data into numpy arry

ip_data_as_numpy_array=np.asarray(input_data)

# reshape the array
ip_data_reshape=ip_data_as_numpy_array.reshape(1,-1)

prediction=regression.predict(ip_data_reshape)
print(prediction)



